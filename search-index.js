var searchIndex = {};
searchIndex["geo"] = {"doc":"","items":[[3,"Coordinate","geo","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"Bbox","","",null,null],[12,"xmin","","",1,null],[12,"xmax","","",1,null],[12,"ymin","","",1,null],[12,"ymax","","",1,null],[3,"Extremes","","",null,null],[12,"ymin","","",2,null],[12,"xmax","","",2,null],[12,"ymax","","",2,null],[12,"xmin","","",2,null],[3,"ExtremePoint","","",null,null],[12,"ymin","","",3,null],[12,"xmax","","",3,null],[12,"ymax","","",3,null],[12,"xmin","","",3,null],[3,"Point","","",null,null],[12,"0","","",4,null],[3,"MultiPoint","","",null,null],[12,"0","","",5,null],[3,"Line","","",null,null],[12,"start","","",6,null],[12,"end","","",6,null],[3,"LineString","","",null,null],[12,"0","","",7,null],[3,"MultiLineString","","",null,null],[12,"0","","",8,null],[3,"Polygon","","",null,null],[12,"exterior","","",9,null],[12,"interiors","","",9,null],[3,"MultiPolygon","","",null,null],[12,"0","","",10,null],[3,"GeometryCollection","","",null,null],[12,"0","","",11,null],[4,"Geometry","","",null,null],[13,"Point","","",12,null],[13,"LineString","","",12,null],[13,"Polygon","","",12,null],[13,"MultiPoint","","",12,null],[13,"MultiLineString","","",12,null],[13,"MultiPolygon","","",12,null],[13,"GeometryCollection","","",12,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"coordinate"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"coordinate"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"coordinate"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bbox"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"extremes"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"extremes"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"extremes"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"extremes"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"extremepoint"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"extremepoint"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"extremepoint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new point.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"point"}}],[11,"x","","Returns the x/horizontal component of the point.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_x","","Sets the x/horizontal component of the point.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"y","","Returns the y/vertical component of the point.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_y","","Sets the y/vertical component of the point.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"lng","","Returns the longitude/horizontal component of the point.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_lng","","Sets the longitude/horizontal component of the point.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"lat","","Returns the latitude/vertical component of the point.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_lat","","Sets the latitude/vertical component of the point.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"dot","","Returns the dot product of the two points: `dot = x1 * x2 + y1 * y2`",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"neg","","Returns a point with the x and y components negated.",4,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"add","","Add a point to the given point.",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"sub","","Subtract a point from the given point.",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"add","","Add a BoundingBox to the given BoundingBox.",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bbox"}}],[11,"add_assign","","Add a BoundingBox to the given BoundingBox.",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"multipoint"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"multipoint"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"multipoint"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new line segment.",6,{"inputs":[{"name":"point"},{"name":"point"}],"output":{"name":"line"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"linestring"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"multilinestring"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"multilinestring"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multilinestring"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new polygon.",9,{"inputs":[{"name":"linestring"},{"name":"vec"}],"output":{"name":"polygon"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"multipolygon"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"multipolygon"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"multipolygon"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"geometrycollection"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"geometrycollection"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"geometrycollection"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"algorithm","","This module includes all the functions of geometric calculations",null,null],[0,"centroid","geo::algorithm","Calculation of the centroid.",null,null],[8,"Centroid","geo::algorithm::centroid","Calculation of the centroid.",null,null],[10,"centroid","","See: https://en.wikipedia.org/wiki/Centroid",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","geo","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"contains","geo::algorithm","Checks if the geometry A is completely inside the B geometry.",null,null],[8,"Contains","geo::algorithm::contains","Checks if the geometry A is completely inside the B geometry.",null,null],[10,"contains","","Checks if the geometry A is completely inside the B geometry.",14,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"contains","geo","",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",7,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"contains","","",7,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"contains","","",9,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",10,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",9,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"contains","","",9,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[0,"intersects","geo::algorithm","Checks if the geometry A intersects the geometry B.",null,null],[8,"Intersects","geo::algorithm::intersects","Checks if the geometry A intersects the geometry B.",null,null],[10,"intersects","","Checks if the geometry A intersects the geometry B.",15,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"intersects","geo","",6,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"intersects","","",4,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"intersects","","",6,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"intersects","","",6,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"intersects","","",7,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"intersects","","",6,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"intersects","","",9,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"intersects","","",7,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"intersects","","",9,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"intersects","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"intersects","","",1,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"intersects","","",9,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"intersects","","",9,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[0,"area","geo::algorithm","Returns the area of the surface of a geometry.",null,null],[8,"Area","geo::algorithm::area","Calculation of the area.",null,null],[10,"area","","Area of polygon. See: https://en.wikipedia.org/wiki/Polygon",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","geo","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"length","geo::algorithm","Returns the length of a line.",null,null],[8,"Length","geo::algorithm::length","Calculation of the length",null,null],[10,"length","","Calculation of the length of a Line",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","geo","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"distance","geo::algorithm","Returns the Euclidean distance between two geometries.",null,null],[8,"Distance","geo::algorithm::distance","Returns the distance between two geometries.",null,null],[10,"distance","","Returns the distance between two geometries",18,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"t"}}],[11,"distance","geo","Minimum distance between two Points",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Point to a MultiPoint",4,{"inputs":[{"name":"self"},{"name":"multipoint"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a MultiPoint to a Point",5,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Point to a Polygon",4,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Polygon to a Point",9,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Point to a MultiPolygon",4,{"inputs":[{"name":"self"},{"name":"multipolygon"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a MultiPolygon to a Point",10,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Point to a MultiLineString",4,{"inputs":[{"name":"self"},{"name":"multilinestring"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a MultiLineString to a Point",8,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Point to a LineString",4,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a LineString to a Point",7,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Line to a Point",6,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","Minimum distance from a Line to a Point",4,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"t"}}],[0,"haversine_distance","geo::algorithm","Returns the Haversine distance between two geometries.",null,null],[8,"HaversineDistance","geo::algorithm::haversine_distance","Returns the Haversine distance between two geometries.",null,null],[10,"haversine_distance","","Returns the Haversine distance between two points:",19,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"t"}}],[11,"haversine_distance","geo","",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[0,"boundingbox","geo::algorithm","Returns the Bbox of a geometry.",null,null],[8,"BoundingBox","geo::algorithm::boundingbox","Calculation of the bounding box of a geometry.",null,null],[10,"bbox","","Return the Bounding Box of a geometry",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","geo","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"simplify","geo::algorithm","Simplifies a `LineString` using the Ramer-Douglas-Peucker algorithm.",null,null],[8,"Simplify","geo::algorithm::simplify","",null,null],[10,"simplify","","Returns the simplified representation of a LineString, using the Ramer–Douglas–Peucker algorithm",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"simplify","geo","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linestring"}}],[0,"simplifyvw","geo::algorithm","Simplifies a `LineString` using the Visvalingam-Whyatt algorithm.",null,null],[8,"SimplifyVW","geo::algorithm::simplifyvw","",null,null],[10,"simplifyvw","","Returns the simplified representation of a LineString, using the Visvalingam-Whyatt algorithm",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"simplifyvw","geo","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linestring"}}],[0,"convexhull","geo::algorithm","Calculates the convex hull of a geometry.",null,null],[8,"ConvexHull","geo::algorithm::convexhull","",null,null],[10,"convex_hull","","Returns the convex hull of a Polygon. The hull is always oriented counter-clockwise.",23,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"convex_hull","geo","",9,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"convex_hull","","",10,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"convex_hull","","",7,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"convex_hull","","",8,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"convex_hull","","",5,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[0,"orient","geo::algorithm","Orients a Polygon's exterior and interior rings.",null,null],[4,"Direction","geo::algorithm::orient","By default, a properly-oriented Polygon has its outer ring oriented counter-clockwise, and its inner ring(s) oriented clockwise. Selecting `Reversed` will result in a Polygon with a clockwise-oriented exterior ring, and counter-clockwise interior ring(s)",null,null],[13,"Default","","exterior ring is oriented counter-clockwise, interior rings are oriented clockwise",24,null],[13,"Reversed","","exterior ring is oriented clockwise, interior rings are oriented counter-clockwise",24,null],[8,"Orient","","",null,null],[10,"orient","","Orients a Polygon's exterior and interior rings according to convention",25,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"self"}}],[11,"orient","geo","",9,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"polygon"}}],[11,"orient","","",10,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"multipolygon"}}],[11,"clone","geo::algorithm::orient","",24,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"extremes","geo::algorithm","Returns the extreme indices of a `Polygon`, `MultiPolygon`, or `MultiPoint`. ",null,null],[8,"ExtremeIndices","geo::algorithm::extremes","",null,null],[10,"extreme_indices","","Find the extreme `x` and `y` indices of a convex Polygon",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"ExtremePoints","","",null,null],[10,"extreme_points","","Find the extreme `x` and `y` points of a Geometry",27,{"inputs":[{"name":"self"}],"output":{"name":"extremepoint"}}],[11,"extreme_indices","geo","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extreme_indices","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extreme_indices","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"rotate","geo::algorithm","Rotates a geometry around either its centroid or a point by an angle, given in degrees.",null,null],[8,"Rotate","geo::algorithm::rotate","",null,null],[10,"rotate","","Rotate a Geometry around its centroid by an angle, in degrees",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[8,"RotatePoint","","",null,null],[10,"rotate_around_point","","Rotate a Geometry around an arbitrary point by an angle, given in degrees",29,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","geo","Rotate the Point about itself by the given number of degrees This operation leaves the point coordinates unchanged",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_around_point","","Rotate the Point about another point by the given number of degrees",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_around_point","","",6,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","","Rotate the LineString about its centroid by the given number of degrees",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_around_point","","Rotate the LineString about a point by the given number of degrees",7,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","","Rotate the Polygon about its centroid by the given number of degrees",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_around_point","","Rotate the Polygon about a given point by the given number of degrees",9,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate_around_point","","Rotate the contained Polygons about a given point by the given number of degrees",10,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","","Rotate the contained Polygons about their centroids by the given number of degrees",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_around_point","","Rotate the contained LineStrings about a given point by the given number of degrees",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","","Rotate the contained LineStrings about their centroids by the given number of degrees",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_around_point","","Rotate the contained Points about a given point by the given number of degrees This operation leaves the point coordinates unchanged",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"point"}],"output":{"name":"self"}}],[11,"rotate","","Rotate the contained Points about their centroids by the given number of degrees",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[7,"COORD_PRECISION","","",null,null],[8,"ToGeo","","",null,null],[10,"to_geo","","",30,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}]],"paths":[[3,"Coordinate"],[3,"Bbox"],[3,"Extremes"],[3,"ExtremePoint"],[3,"Point"],[3,"MultiPoint"],[3,"Line"],[3,"LineString"],[3,"MultiLineString"],[3,"Polygon"],[3,"MultiPolygon"],[3,"GeometryCollection"],[4,"Geometry"],[8,"Centroid"],[8,"Contains"],[8,"Intersects"],[8,"Area"],[8,"Length"],[8,"Distance"],[8,"HaversineDistance"],[8,"BoundingBox"],[8,"Simplify"],[8,"SimplifyVW"],[8,"ConvexHull"],[4,"Direction"],[8,"Orient"],[8,"ExtremeIndices"],[8,"ExtremePoints"],[8,"Rotate"],[8,"RotatePoint"],[8,"ToGeo"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
initSearch(searchIndex);
